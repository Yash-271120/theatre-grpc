// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: hallService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HallServiceClient is the client API for HallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HallServiceClient interface {
	CreateHall(ctx context.Context, in *CreateHallRequest, opts ...grpc.CallOption) (*CreateHallResponse, error)
	GetHall(ctx context.Context, in *GetHallRequest, opts ...grpc.CallOption) (*GetHallResponse, error)
	UpdateHallAvailable(ctx context.Context, in *UpdateHallAvailableRequest, opts ...grpc.CallOption) (*UpdateHallAvailableResponse, error)
}

type hallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHallServiceClient(cc grpc.ClientConnInterface) HallServiceClient {
	return &hallServiceClient{cc}
}

func (c *hallServiceClient) CreateHall(ctx context.Context, in *CreateHallRequest, opts ...grpc.CallOption) (*CreateHallResponse, error) {
	out := new(CreateHallResponse)
	err := c.cc.Invoke(ctx, "/proto.HallService/CreateHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallServiceClient) GetHall(ctx context.Context, in *GetHallRequest, opts ...grpc.CallOption) (*GetHallResponse, error) {
	out := new(GetHallResponse)
	err := c.cc.Invoke(ctx, "/proto.HallService/GetHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallServiceClient) UpdateHallAvailable(ctx context.Context, in *UpdateHallAvailableRequest, opts ...grpc.CallOption) (*UpdateHallAvailableResponse, error) {
	out := new(UpdateHallAvailableResponse)
	err := c.cc.Invoke(ctx, "/proto.HallService/UpdateHallAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallServiceServer is the server API for HallService service.
// All implementations must embed UnimplementedHallServiceServer
// for forward compatibility
type HallServiceServer interface {
	CreateHall(context.Context, *CreateHallRequest) (*CreateHallResponse, error)
	GetHall(context.Context, *GetHallRequest) (*GetHallResponse, error)
	UpdateHallAvailable(context.Context, *UpdateHallAvailableRequest) (*UpdateHallAvailableResponse, error)
	mustEmbedUnimplementedHallServiceServer()
}

// UnimplementedHallServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHallServiceServer struct {
}

func (UnimplementedHallServiceServer) CreateHall(context.Context, *CreateHallRequest) (*CreateHallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHall not implemented")
}
func (UnimplementedHallServiceServer) GetHall(context.Context, *GetHallRequest) (*GetHallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHall not implemented")
}
func (UnimplementedHallServiceServer) UpdateHallAvailable(context.Context, *UpdateHallAvailableRequest) (*UpdateHallAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHallAvailable not implemented")
}
func (UnimplementedHallServiceServer) mustEmbedUnimplementedHallServiceServer() {}

// UnsafeHallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HallServiceServer will
// result in compilation errors.
type UnsafeHallServiceServer interface {
	mustEmbedUnimplementedHallServiceServer()
}

func RegisterHallServiceServer(s grpc.ServiceRegistrar, srv HallServiceServer) {
	s.RegisterService(&HallService_ServiceDesc, srv)
}

func _HallService_CreateHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).CreateHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HallService/CreateHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).CreateHall(ctx, req.(*CreateHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallService_GetHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).GetHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HallService/GetHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).GetHall(ctx, req.(*GetHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallService_UpdateHallAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHallAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).UpdateHallAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HallService/UpdateHallAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).UpdateHallAvailable(ctx, req.(*UpdateHallAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HallService_ServiceDesc is the grpc.ServiceDesc for HallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HallService",
	HandlerType: (*HallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHall",
			Handler:    _HallService_CreateHall_Handler,
		},
		{
			MethodName: "GetHall",
			Handler:    _HallService_GetHall_Handler,
		},
		{
			MethodName: "UpdateHallAvailable",
			Handler:    _HallService_UpdateHallAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hallService.proto",
}
