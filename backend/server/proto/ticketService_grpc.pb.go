// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: ticketService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (TicketService_CreateTicketClient, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (TicketService_CreateTicketClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[0], "/proto.TicketService/CreateTicket", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketServiceCreateTicketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketService_CreateTicketClient interface {
	Recv() (*CreateTicketResponse, error)
	grpc.ClientStream
}

type ticketServiceCreateTicketClient struct {
	grpc.ClientStream
}

func (x *ticketServiceCreateTicketClient) Recv() (*CreateTicketResponse, error) {
	m := new(CreateTicketResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	CreateTicket(*CreateTicketRequest, TicketService_CreateTicketServer) error
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) CreateTicket(*CreateTicketRequest, TicketService_CreateTicketServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_CreateTicket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateTicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).CreateTicket(m, &ticketServiceCreateTicketServer{stream})
}

type TicketService_CreateTicketServer interface {
	Send(*CreateTicketResponse) error
	grpc.ServerStream
}

type ticketServiceCreateTicketServer struct {
	grpc.ServerStream
}

func (x *ticketServiceCreateTicketServer) Send(m *CreateTicketResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTicket",
			Handler:       _TicketService_CreateTicket_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticketService.proto",
}
