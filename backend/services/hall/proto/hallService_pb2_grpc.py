# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import hallService_pb2 as hallService__pb2


class HallServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateHall = channel.unary_unary(
                '/proto.HallService/CreateHall',
                request_serializer=hallService__pb2.CreateHallRequest.SerializeToString,
                response_deserializer=hallService__pb2.CreateHallResponse.FromString,
                )
        self.GetHall = channel.unary_unary(
                '/proto.HallService/GetHall',
                request_serializer=hallService__pb2.GetHallRequest.SerializeToString,
                response_deserializer=hallService__pb2.GetHallResponse.FromString,
                )
        self.UpdateHallAvailable = channel.unary_unary(
                '/proto.HallService/UpdateHallAvailable',
                request_serializer=hallService__pb2.UpdateHallAvailableRequest.SerializeToString,
                response_deserializer=hallService__pb2.UpdateHallAvailableResponse.FromString,
                )


class HallServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateHall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHallAvailable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HallServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateHall': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateHall,
                    request_deserializer=hallService__pb2.CreateHallRequest.FromString,
                    response_serializer=hallService__pb2.CreateHallResponse.SerializeToString,
            ),
            'GetHall': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHall,
                    request_deserializer=hallService__pb2.GetHallRequest.FromString,
                    response_serializer=hallService__pb2.GetHallResponse.SerializeToString,
            ),
            'UpdateHallAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHallAvailable,
                    request_deserializer=hallService__pb2.UpdateHallAvailableRequest.FromString,
                    response_serializer=hallService__pb2.UpdateHallAvailableResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.HallService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HallService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateHall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.HallService/CreateHall',
            hallService__pb2.CreateHallRequest.SerializeToString,
            hallService__pb2.CreateHallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.HallService/GetHall',
            hallService__pb2.GetHallRequest.SerializeToString,
            hallService__pb2.GetHallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateHallAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.HallService/UpdateHallAvailable',
            hallService__pb2.UpdateHallAvailableRequest.SerializeToString,
            hallService__pb2.UpdateHallAvailableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
